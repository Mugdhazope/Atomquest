{"ast":null,"code":"var _jsxFileName = \"/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/Components/ThingSpeakGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { fetchThingSpeakData } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThingSpeakGraph = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const getData = async () => {\n      const data = await fetchThingSpeakData();\n      if (data.length > 0) {\n        const timestamps = data.map(entry => entry.created_at);\n        const field1 = data.map(entry => parseFloat(entry.field1));\n        const field2 = data.map(entry => parseFloat(entry.field2));\n        setChartData({\n          labels: timestamps,\n          datasets: [{\n            label: 'Field 1 (Fluid Level)',\n            data: field1,\n            borderColor: 'rgba(75,192,192,1)',\n            fill: false\n          }, {\n            label: 'Field 2 (Temperature)',\n            data: field2,\n            borderColor: 'rgba(255,99,132,1)',\n            fill: false\n          }]\n        });\n      }\n    };\n    getData();\n  }, []);\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading graph...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"ThingSpeak Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(ThingSpeakGraph, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = ThingSpeakGraph;\nexport default ThingSpeakGraph;\nvar _c;\n$RefreshReg$(_c, \"ThingSpeakGraph\");","map":{"version":3,"names":["React","useEffect","useState","Line","fetchThingSpeakData","jsxDEV","_jsxDEV","ThingSpeakGraph","_s","chartData","setChartData","getData","data","length","timestamps","map","entry","created_at","field1","parseFloat","field2","labels","datasets","label","borderColor","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/Components/ThingSpeakGraph.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { fetchThingSpeakData } from '../utils/api';\n\nconst ThingSpeakGraph = () => {\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await fetchThingSpeakData();\n      if (data.length > 0) {\n        const timestamps = data.map((entry) => entry.created_at);\n        const field1 = data.map((entry) => parseFloat(entry.field1));\n        const field2 = data.map((entry) => parseFloat(entry.field2));\n\n        setChartData({\n          labels: timestamps,\n          datasets: [\n            {\n              label: 'Field 1 (Fluid Level)',\n              data: field1,\n              borderColor: 'rgba(75,192,192,1)',\n              fill: false,\n            },\n            {\n              label: 'Field 2 (Temperature)',\n              data: field2,\n              borderColor: 'rgba(255,99,132,1)',\n              fill: false,\n            },\n          ],\n        });\n      }\n    };\n\n    getData();\n  }, []);\n\n  if (!chartData) {\n    return <p>Loading graph...</p>;\n  }\n\n  return (\n    <div>\n      <h2>ThingSpeak Data Visualization</h2>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default ThingSpeakGraph;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,mBAAmB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMU,OAAO,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,IAAI,GAAG,MAAMR,mBAAmB,CAAC,CAAC;MACxC,IAAIQ,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACnB,MAAMC,UAAU,GAAGF,IAAI,CAACG,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,UAAU,CAAC;QACxD,MAAMC,MAAM,GAAGN,IAAI,CAACG,GAAG,CAAEC,KAAK,IAAKG,UAAU,CAACH,KAAK,CAACE,MAAM,CAAC,CAAC;QAC5D,MAAME,MAAM,GAAGR,IAAI,CAACG,GAAG,CAAEC,KAAK,IAAKG,UAAU,CAACH,KAAK,CAACI,MAAM,CAAC,CAAC;QAE5DV,YAAY,CAAC;UACXW,MAAM,EAAEP,UAAU;UAClBQ,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,uBAAuB;YAC9BX,IAAI,EAAEM,MAAM;YACZM,WAAW,EAAE,oBAAoB;YACjCC,IAAI,EAAE;UACR,CAAC,EACD;YACEF,KAAK,EAAE,uBAAuB;YAC9BX,IAAI,EAAEQ,MAAM;YACZI,WAAW,EAAE,oBAAoB;YACjCC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ;IACF,CAAC;IAEDd,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,SAAS,EAAE;IACd,oBAAOH,OAAA;MAAAoB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChC;EAEA,oBACExB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtCxB,OAAA,CAACH,IAAI;MAACS,IAAI,EAAEH;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACtB,EAAA,CA5CID,eAAe;AAAAwB,EAAA,GAAfxB,eAAe;AA8CrB,eAAeA,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}