{"ast":null,"code":"var _jsxFileName = \"/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TemperatureChart from './Components/TemperatureChart';\nimport HumidityChart from './Components/HumidityChart';\nimport BreachAlertChart from './Components/BreachAlertChart';\nimport FluidLevelChart from './FluidLevelChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperature: 0,\n    humidity: 0,\n    breachAlert: 0,\n    fluidLevel: 0\n  });\n  useEffect(() => {\n    // Simulate data updates\n    setInterval(() => {\n      setSensorData({\n        temperature: Math.floor(Math.random() * 35) + 15,\n        // Random temp between 15 and 50\n        humidity: Math.floor(Math.random() * 100),\n        // Random humidity\n        breachAlert: Math.floor(Math.random() * 2),\n        // 0 or 1 for breach\n        fluidLevel: Math.floor(Math.random() * 100) // Random fluid level\n      });\n    }, 5000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Fluid Container Monitoring\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TemperatureChart, {\n      temperatureData: sensorData.temperature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HumidityChart, {\n      humidityData: sensorData.humidity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BreachAlertChart, {\n      breachAlertData: sensorData.breachAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FluidLevelChart, {\n      fluidLevelData: sensorData.fluidLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Q/ioMcwgFGSsxeINgZtH3z7dcj0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TemperatureChart","HumidityChart","BreachAlertChart","FluidLevelChart","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","temperature","humidity","breachAlert","fluidLevel","setInterval","Math","floor","random","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","temperatureData","humidityData","breachAlertData","fluidLevelData","_c","$RefreshReg$"],"sources":["/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TemperatureChart from './Components/TemperatureChart';\nimport HumidityChart from './Components/HumidityChart';\nimport BreachAlertChart from './Components/BreachAlertChart';\nimport FluidLevelChart from './FluidLevelChart';\n\nconst App = () => {\n  const [sensorData, setSensorData] = useState({\n    temperature: 0,\n    humidity: 0,\n    breachAlert: 0,\n    fluidLevel: 0,\n  });\n\n  useEffect(() => {\n    // Simulate data updates\n    setInterval(() => {\n      setSensorData({\n        temperature: Math.floor(Math.random() * 35) + 15,  // Random temp between 15 and 50\n        humidity: Math.floor(Math.random() * 100),  // Random humidity\n        breachAlert: Math.floor(Math.random() * 2),  // 0 or 1 for breach\n        fluidLevel: Math.floor(Math.random() * 100),  // Random fluid level\n      });\n    }, 5000);\n  }, []);\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h1>Smart Fluid Container Monitoring</h1>\n      <TemperatureChart temperatureData={sensorData.temperature} />\n      <HumidityChart humidityData={sensorData.humidity} />\n      <BreachAlertChart breachAlertData={sensorData.breachAlert} />\n      <FluidLevelChart fluidLevelData={sensorData.fluidLevel} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC;IAC3CY,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,CAAC;IACXC,WAAW,EAAE,CAAC;IACdC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACd;IACAe,WAAW,CAAC,MAAM;MAChBL,aAAa,CAAC;QACZC,WAAW,EAAEK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;QAAG;QACnDN,QAAQ,EAAEI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;QAAG;QAC5CL,WAAW,EAAEG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QAAG;QAC7CJ,UAAU,EAAEE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAG;MAChD,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAKa,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAClCf,OAAA;MAAAe,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzCnB,OAAA,CAACL,gBAAgB;MAACyB,eAAe,EAAEjB,UAAU,CAACE;IAAY;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7DnB,OAAA,CAACJ,aAAa;MAACyB,YAAY,EAAElB,UAAU,CAACG;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDnB,OAAA,CAACH,gBAAgB;MAACyB,eAAe,EAAEnB,UAAU,CAACI;IAAY;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7DnB,OAAA,CAACF,eAAe;MAACyB,cAAc,EAAEpB,UAAU,CAACK;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAACjB,EAAA,CA7BID,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA+BT,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}