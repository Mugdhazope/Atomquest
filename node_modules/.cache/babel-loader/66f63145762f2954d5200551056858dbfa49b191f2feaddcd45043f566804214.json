{"ast":null,"code":"var _jsxFileName = \"/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/Components/BreachAlertChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart, RadarController, RadialLinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register necessary elements and controllers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(RadarController, RadialLinearScale, PointElement, Title, Tooltip, Legend);\nconst BreachAlertChart = () => {\n  _s();\n  const [breachAlertData, setBreachAlertData] = useState(0); // Assuming breachAlertData is a number (0 or 1)\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Function to fetch data from ThingSpeak\n  const fetchData = async () => {\n    const API_KEY = 'YOUR_THINGSPEAK_API_KEY'; // Replace with your ThingSpeak read API key\n    const CHANNEL_ID = 'YOUR_CHANNEL_ID'; // Replace with your ThingSpeak channel ID\n\n    try {\n      const response = await fetch(`https://api.thingspeak.com/channels/${CHANNEL_ID}/fields/3.json?api_key=${API_KEY}`);\n      const data = await response.json();\n      if (data && data.feeds && data.feeds.length > 0) {\n        const latestData = data.feeds[data.feeds.length - 1];\n        setBreachAlertData(parseFloat(latestData.field3)); // Assuming breach alert is stored in field 3\n      }\n    } catch (error) {\n      console.error('Error fetching data from ThingSpeak:', error);\n    }\n  };\n\n  // Function to render and update the chart\n  const renderChart = () => {\n    const data = {\n      labels: ['Alert Status'],\n      datasets: [{\n        label: 'Breach Alert',\n        data: [breachAlertData],\n        backgroundColor: 'rgba(255, 159, 64, 0.4)',\n        borderColor: 'rgba(255, 159, 64, 1)',\n        borderWidth: 2\n      }]\n    };\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Breach Alert Status'\n        }\n      },\n      scales: {\n        r: {\n          angleLines: {\n            display: false\n          },\n          ticks: {\n            min: 0,\n            max: 1,\n            stepSize: 1,\n            display: false\n          },\n          grid: {\n            color: 'rgba(200, 200, 200, 0.2)'\n          }\n        }\n      }\n    };\n    if (chartInstance.current) {\n      chartInstance.current.destroy(); // Destroy existing chart before creating a new one\n    }\n    chartInstance.current = new Chart(chartRef.current, {\n      type: 'radar',\n      data: data,\n      options: options\n    });\n  };\n\n  // Use useEffect to fetch the data on component mount and update the chart\n  useEffect(() => {\n    fetchData(); // Fetch data when the component mounts\n    const interval = setInterval(fetchData, 15000); // Fetch data every 15 seconds\n\n    return () => {\n      clearInterval(interval); // Clear the interval when the component is unmounted\n    };\n  }, []);\n  useEffect(() => {\n    renderChart(); // Re-render the chart whenever the breachAlertData is updated\n  }, [breachAlertData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-card\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(BreachAlertChart, \"LJx6VlDto5BteftOaNaOmuMm2Nw=\");\n_c = BreachAlertChart;\nexport default BreachAlertChart;\nvar _c;\n$RefreshReg$(_c, \"BreachAlertChart\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","RadarController","RadialLinearScale","PointElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","BreachAlertChart","_s","breachAlertData","setBreachAlertData","chartRef","chartInstance","fetchData","API_KEY","CHANNEL_ID","response","fetch","data","json","feeds","length","latestData","parseFloat","field3","error","console","renderChart","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","title","display","text","scales","r","angleLines","ticks","min","max","stepSize","grid","color","current","destroy","type","interval","setInterval","clearInterval","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/Components/BreachAlertChart.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, RadarController, RadialLinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register necessary elements and controllers\nChart.register(RadarController, RadialLinearScale, PointElement, Title, Tooltip, Legend);\n\nconst BreachAlertChart = () => {\n  const [breachAlertData, setBreachAlertData] = useState(0);  // Assuming breachAlertData is a number (0 or 1)\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Function to fetch data from ThingSpeak\n  const fetchData = async () => {\n    const API_KEY = 'YOUR_THINGSPEAK_API_KEY';  // Replace with your ThingSpeak read API key\n    const CHANNEL_ID = 'YOUR_CHANNEL_ID';  // Replace with your ThingSpeak channel ID\n\n    try {\n      const response = await fetch(`https://api.thingspeak.com/channels/${CHANNEL_ID}/fields/3.json?api_key=${API_KEY}`);\n      const data = await response.json();\n      if (data && data.feeds && data.feeds.length > 0) {\n        const latestData = data.feeds[data.feeds.length - 1];\n        setBreachAlertData(parseFloat(latestData.field3));  // Assuming breach alert is stored in field 3\n      }\n    } catch (error) {\n      console.error('Error fetching data from ThingSpeak:', error);\n    }\n  };\n\n  // Function to render and update the chart\n  const renderChart = () => {\n    const data = {\n      labels: ['Alert Status'],\n      datasets: [\n        {\n          label: 'Breach Alert',\n          data: [breachAlertData],\n          backgroundColor: 'rgba(255, 159, 64, 0.4)',\n          borderColor: 'rgba(255, 159, 64, 1)',\n          borderWidth: 2,\n        },\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: 'Breach Alert Status',\n        },\n      },\n      scales: {\n        r: {\n          angleLines: {\n            display: false,\n          },\n          ticks: {\n            min: 0,\n            max: 1,\n            stepSize: 1,\n            display: false,\n          },\n          grid: {\n            color: 'rgba(200, 200, 200, 0.2)',\n          },\n        },\n      },\n    };\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy(); // Destroy existing chart before creating a new one\n    }\n\n    chartInstance.current = new Chart(chartRef.current, {\n      type: 'radar',\n      data: data,\n      options: options,\n    });\n  };\n\n  // Use useEffect to fetch the data on component mount and update the chart\n  useEffect(() => {\n    fetchData(); // Fetch data when the component mounts\n    const interval = setInterval(fetchData, 15000); // Fetch data every 15 seconds\n\n    return () => {\n      clearInterval(interval); // Clear the interval when the component is unmounted\n    };\n  }, []);\n\n  useEffect(() => {\n    renderChart(); // Re-render the chart whenever the breachAlertData is updated\n  }, [breachAlertData]);\n\n  return (\n    <div className=\"chart-card\">\n      <canvas ref={chartRef} />\n    </div>\n  );\n};\n\nexport default BreachAlertChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}