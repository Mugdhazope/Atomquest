{"ast":null,"code":"var _jsxFileName = \"/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MyChart from './MyChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperature: 0,\n    humidity: 0,\n    breachAlert: 0,\n    fluidLevel: 0\n  });\n  useEffect(() => {\n    // Simulating fetching data from an API or ThingSpeak\n    // You can replace this with actual API calls or data fetching logic\n    setInterval(() => {\n      setSensorData({\n        temperature: Math.floor(Math.random() * 35) + 15,\n        // Random temperature between 15 and 50\n        humidity: Math.floor(Math.random() * 100),\n        // Random humidity between 0 and 100\n        breachAlert: Math.floor(Math.random() * 2),\n        // Random breach alert (0 or 1)\n        fluidLevel: Math.floor(Math.random() * 100) // Random fluid level between 0 and 100\n      });\n    }, 5000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: '#444'\n      },\n      children: \"Smart Fluid Container Monitoring\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyChart, {\n      temperatureData: sensorData.temperature,\n      humidityData: sensorData.humidity,\n      breachAlertData: sensorData.breachAlert,\n      fluidLevelData: sensorData.fluidLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Q/ioMcwgFGSsxeINgZtH3z7dcj0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MyChart","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","temperature","humidity","breachAlert","fluidLevel","setInterval","Math","floor","random","style","textAlign","fontFamily","children","color","fileName","_jsxFileName","lineNumber","columnNumber","temperatureData","humidityData","breachAlertData","fluidLevelData","_c","$RefreshReg$"],"sources":["/Users/mugdhazope/projects/Atomquest/smart-fluid-container/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MyChart from './MyChart';\n\nconst App = () => {\n  const [sensorData, setSensorData] = useState({\n    temperature: 0,\n    humidity: 0,\n    breachAlert: 0,\n    fluidLevel: 0,\n  });\n\n  useEffect(() => {\n    // Simulating fetching data from an API or ThingSpeak\n    // You can replace this with actual API calls or data fetching logic\n    setInterval(() => {\n      setSensorData({\n        temperature: Math.floor(Math.random() * 35) + 15,  // Random temperature between 15 and 50\n        humidity: Math.floor(Math.random() * 100),  // Random humidity between 0 and 100\n        breachAlert: Math.floor(Math.random() * 2),  // Random breach alert (0 or 1)\n        fluidLevel: Math.floor(Math.random() * 100),  // Random fluid level between 0 and 100\n      });\n    }, 5000);\n  }, []);\n\n  return (\n    <div style={{ textAlign: 'center', fontFamily: 'Arial, sans-serif' }}>\n      <h1 style={{ color: '#444' }}>Smart Fluid Container Monitoring</h1>\n      <MyChart\n        temperatureData={sensorData.temperature}\n        humidityData={sensorData.humidity}\n        breachAlertData={sensorData.breachAlert}\n        fluidLevelData={sensorData.fluidLevel}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC;IAC3CS,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,CAAC;IACXC,WAAW,EAAE,CAAC;IACdC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFX,SAAS,CAAC,MAAM;IACd;IACA;IACAY,WAAW,CAAC,MAAM;MAChBL,aAAa,CAAC;QACZC,WAAW,EAAEK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;QAAG;QACnDN,QAAQ,EAAEI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;QAAG;QAC5CL,WAAW,EAAEG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QAAG;QAC7CJ,UAAU,EAAEE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAG;MAChD,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAKa,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAoB,CAAE;IAAAC,QAAA,gBACnEhB,OAAA;MAAIa,KAAK,EAAE;QAAEI,KAAK,EAAE;MAAO,CAAE;MAAAD,QAAA,EAAC;IAAgC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnErB,OAAA,CAACF,OAAO;MACNwB,eAAe,EAAEnB,UAAU,CAACE,WAAY;MACxCkB,YAAY,EAAEpB,UAAU,CAACG,QAAS;MAClCkB,eAAe,EAAErB,UAAU,CAACI,WAAY;MACxCkB,cAAc,EAAEtB,UAAU,CAACK;IAAW;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnB,EAAA,CAhCID,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAkCT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}